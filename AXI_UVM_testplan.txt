
AXI UVM Verification Test Plan
==============================

Project: AXI-Lite Slave Verification
Methodology: UVM (Universal Verification Methodology)
Interface: AXI-Lite (No bursts, no IDs)

Test Objectives:
----------------
- Verify AXI read/write channel handshake compliance
- Validate functional correctness of read/write memory behavior
- Ensure scoreboard and functional coverage bins are hit
- Check error handling, reset behavior, and basic corner cases

Test Cases:
-----------

1. Test: axi_write_only_test
   Description: Write multiple values to valid addresses (0x00 to 0xFF)
   Objective: Validate AW → W → B protocol flow, memory update, and scoreboard logging

2. Test: axi_read_only_test
   Description: Read from multiple initialized locations
   Objective: Validate AR → R protocol flow, and correct memory readback

3. Test: axi_read_write_test
   Description: Write a value, then read it back
   Objective: Validate read-after-write correctness using scoreboard

4. Test: axi_virtual_test
   Description: Virtual sequence combining write and read sequences
   Objective: Confirm coordination between write and read agents through virtual sequencer

5. Test: axi_virt_interleave_test
   Description: Interleave write and read sequences (ping-pong)
   Objective: Validate simultaneous sequencer usage and scoreboarding

6. Test: axi_virt_stress_test
   Description: Random large data transactions using virtual sequence
   Objective: Stress-test driver, monitor, scoreboard, and DUT

7. Test: axi_virt_reset_test
   Description: Run virtual sequence and assert reset mid-way
   Objective: Ensure recovery across both agents and valid reset behavior

8. Test: axi_virt_rw_latency_test
   Description: Add delay between write and read via virtual sequence
   Objective: Check if scoreboard holds expected data with delayed reads

9. Test: axi_stall_ready_test
   Description: Delay AWREADY, WREADY, ARREADY signals by few cycles
   Objective: Test monitor/driver robustness to handshake delay

10. Test: axi_reset_during_txn
    Description: Trigger reset in the middle of a transaction
    Objective: Ensure DUT recovers properly and UVM testbench resets cleanly

11. Test: axi_invalid_address_test
    Description: Write and read to 0xFFFF_FFFF (invalid region)
    Objective: Check SLVERR response and scoreboard skip

12. Test: axi_coverage_test
    Description: Generate randomized accesses to hit all coverage bins
    Objective: Close bins for txn_type × addr, txn_type × resp


Coverage Goals:
---------------
- Coverpoint: txn_type → {read, write}
- Coverpoint: addr → {low: 0x00–0x1F, mid: 0x20–0xBF, high: 0xC0–0xFF}
- Coverpoint: resp → {OKAY, SLVERR}
- Cross: txn_type × addr
- Cross: txn_type × resp

Assertions/Checkers:
--------------------
- AWVALID & AWREADY handshake must precede WVALID & WREADY
- ARVALID & ARREADY must precede RVALID
- BVALID must follow WVALID & AWVALID
- Scoreboard must compare expected and actual RDATA
- No transaction should complete during reset
